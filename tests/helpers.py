"""This file contains helper functions used in other tests.
"""
from __future__ import annotations

import numpy as np
import xarray as xr


def simulate_binned_data(shape: tuple, dims: list) -> xr.DataArray:
    """Generate a fake xr.DataArray as those generated by binning.

    Used for testing purposes.

    Args:
        shape (tuple): Shape ouf the data
        dims (list): name of the dimensions

    Returns:
         xr.DataArray: the simulated data array
    """
    assert len(dims) == len(
        shape,
    ), "number of dimensions and data shape must coincide"

    return xr.DataArray(
        data=np.random.rand(*shape),
        coords={d: np.linspace(-1, 1, s) for d, s in zip(dims, shape)},
        attrs={
            "metadata": {
                "list": [1, 2, 3],
                "string": "asdf",
                "int": 1,
                "float": 1.0,
                "bool": True,
                "nested": {
                    "nestedentry": 1.0,
                },
            },
        },
    )


def get_linear_bin_edges(bins: int, ranges: tuple) -> np.ndarray:
    """Returns the bin edges for the given bins and ranges

    Args:
        bins (int): Number of bins, N.
        ranges (Tuple[float, float]): start, end points of binning edges.

    Returns:
        np.ndarray: array of edges, with shape N+1
    """
    return np.linspace(
        ranges[0],
        ranges[1],
        bins + 1,
        endpoint=True,
    )
