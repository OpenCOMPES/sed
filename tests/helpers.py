"""This file contains helper functions used in other tests.
"""
import numpy as np
import xarray as xr


def simulate_binned_data(shape: tuple, dims: list) -> xr.DataArray:
    """Generate a fake xr.DataArray as those generated by binning.
    Used for testing purpouses.

    Args:
        shape (tuple): Shape ouf the data
        dims (list): name of the dimensions

    Returns:
        DataArray: the simulated data array
    """
    assert len(dims) == len(
        shape,
    ), "number of dimesions and data shape must coincide"

    return xr.DataArray(
        data=np.random.rand(*shape),
        coords={d: np.linspace(-1, 1, s) for d, s in zip(dims, shape)},
        attrs={
            "metadata": {
                "list": [1, 2, 3],
                "string": "asdf",
                "int": 1,
                "float": 1.0,
                "bool": True,
                "nested": {
                    "nestedentry": 1.0,
                },
            },
        },
    )


def get_linear_bin_edges(array: np.ndarray) -> np.ndarray:
    """Returns the bin edges of the given array.

    Args:
        array (np.ndarray): The array of N center values from which to evaluate the
            bin range. Must be linear.


    Returns:
        np.ndarray: array of edges, with shape N+1
    """
    step = array[1] - array[0]
    last_step = array[-2] - array[-3]
    assert np.allclose(last_step, step), "not a linear array"
    return np.linspace(
        array[0],
        array[-1],
        array.size + 1,
    )
